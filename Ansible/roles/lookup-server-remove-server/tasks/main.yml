---

# check if lookup-server rpm is installed
- name: check for lookup-server rpm
  command: rpm -q lookup-server
  args:
    warn: no
  register: rpm_check

# fail if lookup-server rpm not installed
- name: fail when lookup-server not installed
  fail: msg="lookup-server not installed"
  when: rpm_check.rc == 1

# Validate mandatory variables
# Script aborted without any rollback needed.
- name: fail when variable not defined
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items:
    - lookup_server_name
    - lookup_server_port

# Validate mandatory variables
# Script aborted without any rollback needed.
- name: fail when variable is empty
  fail: msg="Variable '{{ item.name }}' should not be empty"
  when: ( item.value is none ) or ( item.value == "" )
  with_items:
    - { name: "lookup_server_name", value: "{{ lookup_server_name }}" }
    - { name: "lookup_server_port", value: "{{ lookup_server_port }}" }

# Validate mandatory variables
# Script aborted without any rollback needed.
- name: fail when variable contains space character
  fail: msg="Variable '{{ item.name }}' should not contain space character"
  when: '" " in item.value'
  with_items:
    - { name: "lookup_server_name", value: "{{ lookup_server_name }}" }

# Database operations
- name: "Generate select lookup server SQL"
  template:
    src: select-lookup-server.sql.j2
    dest: "{{ TEST_home }}/sql/lookupserver/select-lookup-server.sql"
    owner: "{{ user }}"
    group: "{{ group }}"

# Execute select-lookup-server.sql
- name: "Check if '{{ lookup_server_name }}' lookup server exists in DB"
  shell: ". {{ TEST_home }}/bin/db_tools.sh && init_db EL
                && run_db_script {{ TEST_home }}/sql/lookupserver/select-lookup-server.sql {{ TEST_home }}/log/select-lookup-server.sql.log"
  register: script_result_select_lookup_server
  changed_when: False

- name: "Read output from lookup server check"
  shell: "cat {{ TEST_home }}/log/select-lookup-server.sql.log"
  register: select_lookup_server_log
  when: script_result_select_lookup_server | success
  changed_when: False

- name: "Generate delete lookup server SQL"
  template:
    src: delete-lookup-server.sql.j2
    dest: "{{ TEST_home }}/sql/lookupserver/delete-lookup-server.sql"
    owner: "{{ user }}"
    group: "{{ group }}"
  when: "'1 row' in select_lookup_server_log.stdout"

# Execute update-lookup-server.sql
- name: "Delete entry for '{{ lookup_server_name }}' lookup server from DB"
  shell: ". {{ TEST_home }}/bin/db_tools.sh && init_db EL
                && run_db_script {{ TEST_home }}/sql/lookupserver/delete-lookup-server.sql {{ TEST_home }}/log/delete-lookup-server.sql.log"
  when: "'1 row' in select_lookup_server_log.stdout"
  register: server_deleted

# Run remove_server script
- name: run remove_server script
  command: "{{ install_dir }}/lookup_server/bin/remove_server {{ lookup_server_name }}"
  register: script_result
  when: server_deleted.changed

# Remove firewall open base on configured port number
- name: remove ports for lookup-server
  firewalld:
    zone: public
    port: "{{ item }}/tcp"
    permanent: true
    immediate: true
    state: disabled
  with_items:
    - "{{ lookup_server_port }}"
  when: script_result | success
  become: true
  become_method: sudo

# Disable service el-lookup-server
- name: disable service el-lookup-{{ lookup_server_name }}
  systemd:
    name: el-lookup-{{ lookup_server_name }}
    enabled: no
    state: stopped
  become: true
  become_method: sudo
  ignore_errors: True

- name: remove el-lookup-{{ lookup_server_name }}
  file:
    state: absent
    path: /etc/sysconfig/el-lookup-{{ lookup_server_name }}
  become: true
  become_method: sudo
  ignore_errors: True

- name: remove el-lookup-{{ lookup_server_name }}.service
  file:
    state: absent
    path: /etc/systemd/system/el-lookup-{{ lookup_server_name }}.service
  become: true
  become_method: sudo
  ignore_errors: True

...

