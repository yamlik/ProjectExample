# Set variable if inventory hostname is defined as IPv4 or IPv6 address
- set_fact:
    extensions_content: DNS={{ hostvars[inventory_hostname]['inventory_hostname'] }}
  when: not ( hostvars[inventory_hostname]['inventory_hostname'] | ipaddr )

- set_fact:
    extensions_content: IP={{ hostvars[inventory_hostname]['inventory_hostname'] }}
  when: hostvars[inventory_hostname]['inventory_hostname'] | ipaddr

- name: Get ui hostname
  shell: "hostname"
  register: hostname_output

- set_fact: 
    fqdn_temp: "{{ hostname_output.stdout }}"

- name: Remove existing certs
  shell: "rm {{ crmq_cert_dir }}/*"
  become: true
  become_method: sudo
  ignore_errors: yes
   
- name: Create directory {{ crmq_cert_dir }} if not exist
  file:
    path: "{{ crmq_cert_dir }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"

- name: Create ca serial file
  copy:
    content: "01"
    dest: "{{ crmq_cert_dir }}/index.txt"
    force: no
    owner: "rabbitmq"
    group: "rabbitmq"
    mode: 0644
 
- name: Create tls config extensions file
  template:
    src: extensions.j2
    dest: "{{ crmq_cert_dir }}/extensions.txt"
    owner: "rabbitmq"
    group: "rabbitmq"
    mode: 0755

- name: create folder to store ca backup
  file:
    path:  "{{ ca_key_backup_dir }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"
  when: operation == "instantiate" or ( host_type == "ui" and ( groups['vdu-ui'].index(inventory_hostname) == 1 ))

- name: create files folder for current role
  local_action: shell mkdir -p {{ role_path }}/files
  when: operation == "instantiate" or operation == "rebuild" or operation == "scale"
  become: no

- name: generate ca key if not exist
  local_action: command openssl genrsa -out {{ role_path }}/files/rabbitmq_ca.key 2048
  when: operation == "instantiate" and ( groups['vdu-ui'].index(inventory_hostname) == 0 )
  become: no

- name: Copy rabbitmq ca private key to role directory
  local_action: copy src={{ playbook_dir }}/rabbitmq_ca.key dest={{ role_path }}/files/rabbitmq_ca.key
  when: operation == "rebuild" or operation == "scale"
  become: no

- name: Copy ca key to ui host
  copy:
    src: "files/rabbitmq_ca.key"
    dest: "{{ ca_key_backup_dir }}/rabbitmq_ca.key"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0600
  when: host_type == "ui"
  become: true
  become_method: sudo

- name: Check that the RabbitMQ CA private key exists
  stat:
    path: "{{ crmq_cert_dir }}/rabbitmq_ca.key"
  register: rabbitmq_ca_key_stat_result

# Note that this key is generated by command below:
# openssl genrsa -out {{ crmq_cert_dir }}/rabbitmq_ca.key 2048
- name: Copy RabbitMQ CA key
  copy:
    src: "files/rabbitmq_ca.key"
    dest: "{{ crmq_cert_dir }}/rabbitmq_ca.key"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0600
  when: not rabbitmq_ca_key_stat_result.stat.exists

- name: Check that the RabbitMQ CA cert exists
  stat:
    path: "{{ crmq_cert_dir }}/rabbitmq_ca.crt"
  register: rabbitmq_ca_crt_stat_result

# openssl req -x509 -new -nodes -sha256 -key /etc/rabbitmq/ssl/rabbitmq_ca.key -days 3650 -subj '/CN=DRRabbitMQCA' -out /etc/rabbitmq/ssl/rabbitmq_ca.crt
- name: "Generate RabbitMQ CA cert"
  shell: "openssl req -x509 -new -nodes -sha256 -key {{ crmq_cert_dir }}/rabbitmq_ca.key -days 3650 -subj '/CN={{ fqdn_temp }}' -out {{ crmq_cert_dir }}/rabbitmq_ca.crt"
  register: ca_cert_generated
  failed_when: ca_cert_generated.rc != 0
  when: not rabbitmq_ca_crt_stat_result.stat.exists
  become: true
  become_method: sudo

- name: backup ca cert
  shell: "cp {{ crmq_cert_dir }}/rabbitmq_ca.crt {{ ca_key_backup_dir }}/rabbitmq_ca.crt"
  become: true
  become_method: sudo

- name: update permission
  shell: "chmod 644 {{ ca_key_backup_dir }}/rabbitmq_ca.crt"
  become: true
  become_method: sudo

- name: Check that the RabbitMQ server private key exists
  stat:
    path: "{{ crmq_cert_dir }}/rabbitmq_server.key"
  register: rabbitmq_server_key_stat_result

# openssl genrsa -out /etc/rabbitmq/ssl/rabbitmq_server.key 2048
- name: "Generate RabbitMQ Server key"
  shell: "openssl genrsa -out {{ crmq_cert_dir }}/rabbitmq_server.key 2048"
  register: key_generated
  failed_when: key_generated.rc != 0
  when: not rabbitmq_server_key_stat_result.stat.exists

- name: Check that the RabbitMQ server tls csr exists
  stat:
    path: "{{ crmq_cert_dir }}/rabbitmq_server.csr"
  register: rabbitmq_server_csr_stat_result

# openssl req -new -sha256 -key /etc/rabbitmq/ssl/rabbitmq_server.key -subj '/CN=DRRabbitmqCA' -out /etc/rabbitmq/ssl/rabbitmq_server.csr
- name: "Generate RabbitMQ Server Cert"
  shell: "openssl req -new -sha256 -key {{ crmq_cert_dir }}/rabbitmq_server.key -subj '/CN=DRRabbitmqCA' -out {{ crmq_cert_dir }}/rabbitmq_server.csr"
  register: csr_generated
  failed_when: csr_generated.rc != 0
  when: not rabbitmq_server_csr_stat_result.stat.exists


- name: Check that the RabbitMQ server tls cert exists
  stat:
    path: "{{ crmq_cert_dir }}/rabbitmq_server.crt"
  register: rabbitmq_server_crt_stat_result

# openssl x509 -req -sha256 -CA /etc/rabbitmq/ssl/rabbitmq_ca.crt -CAkey /etc/rabbitmq/ssl/rabbitmq_ca.key -CAserial /etc/rabbitmq/ssl/index.txt -CAcreateserial -in /etc/rabbitmq/ssl/rabbitmq_server.csr -days 3650 -extensions v3_req -extfile /etc/rabbitmq/ssl/extensions.txt -out /etc/rabbitmq/ssl/rabbitmq_server.crt
- name: "Generate RabbitMQ Server Cert"
  shell: "openssl x509 -req -sha256 -CA {{ crmq_cert_dir }}/rabbitmq_ca.crt -CAkey {{ crmq_cert_dir }}/rabbitmq_ca.key -CAserial {{ crmq_cert_dir }}/index.txt -CAcreateserial -in {{ crmq_cert_dir }}/rabbitmq_server.csr -days 3650 -extensions v3_req -extfile {{ crmq_cert_dir }}/extensions.txt -out {{ crmq_cert_dir }}/rabbitmq_server.crt"
  register: cert_generated
  failed_when: cert_generated.rc != 0
  when: not rabbitmq_server_crt_stat_result.stat.exists

- name: Update certs permission
  shell: "chmod -R 644 {{ crmq_cert_dir }}/*"
  become: true
  become_method: sudo
  
- name: Update certs owner
  shell: "chown -R {{ user }}:{{ group }} {{ crmq_cert_dir }}/*"
  become: true
  become_method: sudo

- name: Install RabbitMQ ca cert
  shell: "cp {{ crmq_cert_dir }}/rabbitmq_ca.crt /etc/pki/ca-trust/source/anchors"
  become: true
  become_method: sudo

- name: Update RabbitMQ ca cert
  shell: "update-ca-trust"
  become: true
  become_method: sudo

- name: Copy backup rabbitmq ca crt to docker playbook directory
  fetch:
    src: "{{ ca_key_backup_dir}}/rabbitmq_ca.crt"
    dest: "{{ playbook_dir }}/rabbitmq_ca.crt" 
    flat: yes
  when: operation == "instantiate" and ( groups['vdu-ui'].index(inventory_hostname) == 0 )

- name: Copy backup rabbitmq ca key to docker playbook directory
  fetch:
    src: "{{ ca_key_backup_dir}}/rabbitmq_ca.key"
    dest: "{{ playbook_dir }}/rabbitmq_ca.key" 
    flat: yes
  when: operation == "instantiate" and ( groups['vdu-ui'].index(inventory_hostname) == 0 )
