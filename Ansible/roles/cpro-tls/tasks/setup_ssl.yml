# Set variable if inventory hostname is defined as IPv4 or IPv6 address
- set_fact:
    extensions_content: DNS={{ hostvars[inventory_hostname]['inventory_hostname'] }}
  when: hostvars[inventory_hostname]['inventory_hostname'] is not regex ("^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$")

- set_fact:
    extensions_content: IP={{ hostvars[inventory_hostname]['inventory_hostname'] }}
  when: hostvars[inventory_hostname]['inventory_hostname'] is regex ("^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$") 

- set_fact:
    fqdn_temp: "{{ hostvars[inventory_hostname]['fqdn_host'] }}"

- name: Remove existing certs
  shell: "rm {{ prometheus_cert_dir }}/*"
  become: true
  become_method: sudo
  ignore_errors: yes

- name: Create directory {{ prometheus_cert_dir }} if not exist
  file:
    path: "{{ prometheus_cert_dir }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"

- name: Create ca serial file
  copy:
    content: "01"
    dest: "{{ prometheus_cert_dir }}/index.txt"
    force: no
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0644
 
- name: Create tls config extensions file
  template:
    src: extensions.j2
    dest: "{{ prometheus_cert_dir }}/extensions.txt"

- name: create folder to store ca backup
  file:
    path:  "{{ ca_key_backup_dir }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"
  when: operation == "instantiate" or ( host_type == "ui" and ( groups['vdu-ui'].index(inventory_hostname) == 1 ))

- name: create files folder for current role
  local_action: shell mkdir -p {{ role_path }}/files
  when: operation == "instantiate" or operation == "rebuild" or operation == "scale"
  become: no

- name: generate ca key if not exist
  local_action: command openssl genrsa -out {{ role_path }}/files/prometheus_ca 4096
  when: operation == "instantiate" and ( groups['vdu-ui'].index(inventory_hostname) == 0 )
  become: no

- name: Copy prometheus ca private key to role directory
  local_action: copy src={{ playbook_dir }}/prometheus_ca dest={{ role_path }}/files/prometheus_ca
  when: operation == "rebuild" or operation == "scale"
  become: no

- name: Copy ca key to ui host
  copy:
    src: prometheus_ca
    dest: "{{ ca_key_backup_dir }}/prometheus_ca"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0600
  when: host_type == "ui"

- name: Check that the Prometheus CA private key exists
  stat:
    path: "{{ prometheus_cert_dir }}/prometheus_ca.key"
  register: prometheus_ca_key_stat_result

# Note that this key is generated by command below:
# openssl genrsa -out {{ prometheus_cert_dir }}/prometheus_ca.key 4096
- name: Copy Prometheus CA key
  copy:
    src: prometheus_ca
    dest: "{{ prometheus_cert_dir }}/prometheus_ca.key"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0600
  when: not prometheus_ca_key_stat_result.stat.exists

- name: Check that the Prometheus CA cert exists
  stat:
    path: "{{ prometheus_cert_dir }}/prometheus_ca.crt"
  register: prometheus_ca_crt_stat_result
  
- name: "Generate Prometheus CA cert"
  shell: "openssl req -x509 -new -nodes -sha256 -key {{ prometheus_cert_dir }}/prometheus_ca.key -days 3650 -subj '/CN=DRPrometheusCA' -out {{ prometheus_cert_dir }}/prometheus_ca.crt"
  register: ca_cert_generated
  failed_when: ca_cert_generated.rc != 0
  when: not prometheus_ca_crt_stat_result.stat.exists

- name: Check that the Prometheus server private key exists
  stat:
    path: "{{ prometheus_cert_dir }}/prometheus_server.key"
  register: prometheus_server_key_stat_result

- name: "Generate Prometheus Server key"
  shell: "openssl genrsa -out {{ prometheus_cert_dir }}/prometheus_server.key 2048"
  register: key_generated
  failed_when: key_generated.rc != 0
  when:
    - not prometheus_server_key_stat_result.stat.exists

- name: Check that the Prometheus server tls csr exists
  stat:
    path: "{{ prometheus_cert_dir }}/prometheus_server.csr"
  register: prometheus_server_csr_stat_result

- name: "Generate Prometheus Server Cert"
  shell: "openssl req -new -sha256 -key {{ prometheus_cert_dir }}/prometheus_server.key -subj '/CN=DRPrometheusServerCA' -out {{ prometheus_cert_dir }}/prometheus_server.csr"
  register: csr_generated
  failed_when: csr_generated.rc != 0
  when:
    - not prometheus_server_csr_stat_result.stat.exists

- name: Check that the Prometheus server tls cert exists
  stat:
    path: "{{ prometheus_cert_dir }}/prometheus_server.crt"
  register: prometheus_server_crt_stat_result

- name: "Generate Prometheus Server Cert"
  shell: "openssl x509 -req -sha256 -CA {{ prometheus_cert_dir }}/prometheus_ca.crt -CAkey {{ prometheus_cert_dir }}/prometheus_ca.key -CAserial {{ prometheus_cert_dir }}/index.txt -CAcreateserial -in {{ prometheus_cert_dir }}/prometheus_server.csr -days 3650 -extensions v3_req -extfile {{ prometheus_cert_dir }}/extensions.txt -out {{ prometheus_cert_dir }}/prometheus_server.crt"
  register: cert_generated
  failed_when: cert_generated.rc != 0
  when: not prometheus_server_crt_stat_result.stat.exists

